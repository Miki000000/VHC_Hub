@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using VHC_Erp.frontend.Configurations
@using VHC_Erp.frontend.Utils.GlobalDialogErrorHandler
@using VHC_Erp.Shared.EntitiesCommands.User
@using VHC_Erp.Shared.SharedLogic
@inject IGenerateDialog GenerateDialog
@inject IHttpClientFactory ClientBuilder
@inject ISnackbar Snackbar



<MudDialog>
    <TitleContent>
        Register a User
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="formIsValid" @bind-Errors="errors">
            <MudTextField @bind-Value="username" HelperText="Min. 3 characters" Label="Username" Required="true" RequiredError="Username is required!" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="email" HelperText="Min. 3 characters" InputType="InputType.Email" Label="Email" Required="true" RequiredError="Email is required!" Validation="@(new EmailAddressAttribute(){ErrorMessage = "The Email is invalid!"})" Variant="Variant.Outlined" />
            <MudTextField InputType="InputType.Password" Required="true" RequiredError="Password is required!" Label="Password" HelperText="Min. 3 characters" @bind-Value="password" Variant="Variant.Outlined"/>
            <MudTextField Label="Money" Required="true" RequiredError="Money is required!" HelperText="Min. 3 characters" @bind-Value="money" Variant="Variant.Outlined"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="@(async () => {  await RegisterUser(new RegisterUserCommand(email, username, password, money)); })" Variant="Variant.Filled">
            Ok
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    string username;
    string email;
    string password;
    int money = 0;
    bool formIsValid;
    string[] errors = {};
    
    public async Task RegisterUser(RegisterUserCommand registerUserCommand)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        try
        {
            if(!formIsValid)
            {
                Snackbar.Add("Invalid user request.\n" + string.Join("\n", errors), Severity.Error);
                return; 
            }
            var client = ClientBuilder.CreateClient(HttpClientConfigs.ClientName);
            var rawResult = await client.PostAsJsonAsync("/api/user", registerUserCommand);
            await rawResult
                .ToMaybe()
                .Ensure(r => r.IsSuccessStatusCode,
                    async () => Snackbar.Add("Failed to create user: " + await rawResult.Content.ReadAsStringAsync(), Severity.Error))
                .Then(async r
                    =>
                {
                    var content = await r.Content.ReadAsStringAsync();
                    var response = JsonSerializer.Deserialize<RegisterUserResponse>(content,
                        new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                    Snackbar.Add("Success on creating account: " + response, Severity.Success);
                    return response.ToMaybe();
                }, action: () => Snackbar.Add("Failed on getting user json.", Severity.Error));
        }
        catch (Exception e)
        {
            Snackbar.Add($"Unknown error: {e.Message}", Severity.Error);
        }
    }
}